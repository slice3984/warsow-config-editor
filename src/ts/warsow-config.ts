export interface configProperty {
    type: string;
    property: string;
    value: string;
    containsColors: boolean;
}

export class WarsowConfig {
    private binds: configProperty[];
    private setas: configProperty[];
    private misc: configProperty[];

    constructor(binds: configProperty[],
        setas: configProperty[],
        misc: configProperty[]) {
        this.binds = binds;
        this.setas = setas;
        this.misc = misc;
    }

    getBinds() {
        return this.binds;
    }

    getSetas() {
        return this.setas;
    }

    getMisc() {
        return this.misc;
    }

    setBind(key: string, value: string) {
        const property = this.binds.find(property => property.property === key);

        if (!property) {
            this.binds.push({
                type: 'bind',
                property: key,
                value,
                containsColors: /\^[0-9]/.test(value)
            });
        } else {
            property.property = key;
            property.value = value;
            property.containsColors = /\^[0-9]/.test(value);
        }
    }

    setSeta(cmd: string, value: string) {
        const property = this.setas.find(property => property.property === cmd);

        if (!property) {
            this.setas.push({
                type: 'seta',
                property: cmd,
                value,
                containsColors: /\^[0-9]/.test(value)
            });
        } else {
            property.property = cmd;
            property.value = value;
            property.containsColors = /\^[0-9]/.test(value);
        }
    }

    generateConfig() {
        let config = '// Generated by slice warsow config editor\n\n';
        config += '// Key bindings\n';
        config += 'unbindall\n';

        this.binds.forEach(bind => {
            config += `${bind.type} ${bind.property} "${bind.value}"\n`;
        });

        config += '\n\n';
        config += '// Variables\n';

        this.setas.forEach(seta => {
            config += `${seta.type} ${seta.property} "${seta.value}"\n`;
        });

        config += '\n\n';
        config += '// Misc & aliases\n';
        config += 'unaliasall\n';

        this.misc.forEach(misc => {
            config += `${misc.type} ${misc.property} "${misc.value}"\n`;
        });

        return config;
    }
}